# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# This workflow builds GPU packages on GitHub-hosted runners (ubuntu-latest)
# to verify Linux compatibility WITHOUT requiring GPU hardware.
#
# GPU tests are commented out and will be enabled once a self-hosted
# GPU runner is available. See docs/setup-gpu-ci-runner.md for setup.
#
name: rust-gpu

on:
  pull_request:
  push:

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}-rust-gpu
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash -l -eo pipefail {0}

jobs:
  rust-gpu-build:
    name: "GPU Build (Linux compatibility, no GPU required)"
    # Using GitHub-hosted runner to verify Linux build without GPU
    # TODO: Once GPU runner is ready, create separate job with:
    #   runs-on: [self-hosted, gpu, linux, cuda]
    # Recommended GPU runner: AWS EC2 g5.xlarge with Deep Learning AMI
    runs-on: ubuntu-latest

    env:
      CARGO_INCREMENTAL: 0
      # Reduce debug info to save disk space
      CARGO_PROFILE_DEV_DEBUG: 1
      CARGO_PROFILE_TEST_DEBUG: 1
      # Limit parallel compilation to reduce memory pressure (GPU compilation is intensive)
      # Adjust based on instance size: 4 for g5.xlarge, 8 for g5.2xlarge
      CARGO_BUILD_JOBS: 4
      # CUDA configuration (not available on ubuntu-latest, but set for consistency)
      CUDA_HOME: /usr/local/cuda
      # vcpkg for C++ dependencies
      VCPKG_ROOT: /opt/vcpkg
      CMAKE_TOOLCHAIN_FILE: /opt/vcpkg/scripts/buildsystems/vcpkg.cmake

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # TODO: Uncomment when GPU runner is available
      # - name: Verify GPU availability
      #   run: |
      #     nvidia-smi
      #     which nvcc
      #     nvcc --version
      #     echo "CUDA_HOME=$CUDA_HOME"

      - name: Setup vcpkg (if not cached)
        run: |
          if [ ! -d "$VCPKG_ROOT" ]; then
            sudo mkdir -p /opt
            sudo git clone https://github.com/Microsoft/vcpkg.git $VCPKG_ROOT
            sudo $VCPKG_ROOT/bootstrap-vcpkg.sh
            sudo $VCPKG_ROOT/vcpkg install abseil openssl
          else
            echo "vcpkg already installed at $VCPKG_ROOT"
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Core build tools
          sudo apt-get install -y build-essential pkg-config
          # CMake (upgrade if needed for CUDA support)
          sudo apt-get install -y cmake libzstd-dev
          # GEOS for spatial operations
          sudo apt-get install -y libgeos-dev
          # TODO: Uncomment when GPU runner is available
          # # CUDA toolkit (if not pre-installed)
          # if ! command -v nvcc &> /dev/null; then
          #   sudo apt-get install -y nvidia-cuda-toolkit
          # fi

      - name: Setup Rust toolchain
        run: |
          rustup toolchain install stable --no-self-update
          rustup default stable
          cargo --version
          rustc --version

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-gpu-v2"
          # Cache key includes GPU packages
          key: "${{ runner.os }}-${{ hashFiles('c/sedona-libgpuspatial/**') }}"

      # Build WITHOUT GPU feature to verify Linux compatibility
      - name: Build libgpuspatial (without GPU, structure only)
        run: |
          echo "Building libgpuspatial WITHOUT GPU feature (Linux compatibility check)..."
          echo "This verifies the code compiles on Linux without CUDA"
          cargo build --package sedona-libgpuspatial --verbose
          echo "libgpuspatial build complete (no GPU)"

      - name: Build GPU spatial join (without GPU)
        run: |
          echo "Building GPU spatial join package WITHOUT GPU feature..."
          cargo build --package sedona-spatial-join-gpu

      # TODO: Uncomment when GPU runner is available
      # - name: Build libgpuspatial (CUDA compilation - ~20-25 minutes)
      #   run: |
      #     echo "Starting libgpuspatial build with CUDA support..."
      #     echo "Note: This step takes approximately 20-25 minutes on g5.xlarge instances"
      #     cargo build --package sedona-libgpuspatial --features gpu --verbose
      #     echo "libgpuspatial build complete"

      # - name: Build GPU spatial join (with GPU)
      #   run: |
      #     cargo build --package sedona-spatial-join-gpu --features gpu

      # - name: Test libgpuspatial
      #   run: |
      #     echo "Running libgpuspatial tests with GPU..."
      #     cargo test --package sedona-libgpuspatial --features gpu -- --nocapture

      # - name: Test GPU spatial join (structure tests)
      #   run: |
      #     echo "Running structure tests (don't require GPU execution)..."
      #     cargo test --package sedona-spatial-join-gpu --features gpu

      # - name: Test GPU functional tests (require GPU)
      #   run: |
      #     echo "Running GPU functional tests (require actual GPU)..."
      #     cargo test --package sedona-spatial-join-gpu --features gpu -- --ignored --nocapture

      # - name: Verify GPU compilation
      #   run: |
      #     # Verify that GPU code was actually compiled with CUDA
      #     echo "Verifying CUDA was used in compilation..."
      #     if cargo build --package sedona-libgpuspatial --features gpu -vv 2>&1 | grep -q "GPU feature not enabled"; then
      #       echo "ERROR: GPU feature was not enabled!"
      #       exit 1
      #     fi
      #     echo "✓ GPU build successful with CUDA support"

      - name: Build summary
        run: |
          echo "=== GPU Package Build Summary ==="
          echo "Runner: GitHub-hosted (ubuntu-latest)"
          echo "Status: Building WITHOUT GPU feature (Linux compatibility check)"
          echo "Platform: $(uname -a)"
          echo "Rust Version: $(rustc --version)"
          echo "Build completed successfully"
          echo ""
          echo "✓ GPU packages compile on Linux without CUDA"
          echo "✓ Ready for self-hosted GPU runner setup"
          echo ""
          echo "Next steps to enable GPU testing:"
          echo "  1. Set up self-hosted runner with GPU (see docs/setup-gpu-ci-runner.md)"
          echo "  2. Create new job or update runs-on to: [self-hosted, gpu, linux, cuda]"
          echo "  3. Uncomment GPU test steps in this workflow"
          echo "  4. Run actual GPU tests with --features gpu"