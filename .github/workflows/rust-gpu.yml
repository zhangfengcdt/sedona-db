# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
name: rust-gpu

on:
  pull_request:
    branches:
      - main
    paths:
      - 'c/sedona-libgpuspatial/**'
      - 'rust/sedona-spatial-join-gpu/**'
      - '.github/workflows/rust-gpu.yml'
  push:
    branches:
      - main
    paths:
      - 'c/sedona-libgpuspatial/**'
      - 'rust/sedona-spatial-join-gpu/**'
      - '.github/workflows/rust-gpu.yml'

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}-rust-gpu
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash -l -eo pipefail {0}

jobs:
  rust-gpu:
    name: "GPU Build & Test"
    # Use self-hosted runner with CUDA support
    # Recommended: AWS EC2 instance with "Deep Learning Base OSS Nvidia Driver GPU AMI (Ubuntu 24.04)"
    # Example: g5.xlarge or g5.2xlarge instance type
    runs-on: [self-hosted, gpu, linux, cuda]

    env:
      CARGO_INCREMENTAL: 0
      # Reduce debug info to save disk space
      CARGO_PROFILE_DEV_DEBUG: 1
      CARGO_PROFILE_TEST_DEBUG: 1
      # Limit parallel compilation to reduce memory pressure (GPU compilation is intensive)
      # Adjust based on instance size: 4 for g5.xlarge, 8 for g5.2xlarge
      CARGO_BUILD_JOBS: 4
      # CUDA configuration
      CUDA_HOME: /usr/local/cuda
      # vcpkg for C++ dependencies
      VCPKG_ROOT: /opt/vcpkg
      CMAKE_TOOLCHAIN_FILE: /opt/vcpkg/scripts/buildsystems/vcpkg.cmake

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Verify GPU availability
        run: |
          nvidia-smi
          which nvcc
          nvcc --version
          echo "CUDA_HOME=$CUDA_HOME"

      - name: Setup vcpkg (if not cached)
        run: |
          if [ ! -d "$VCPKG_ROOT" ]; then
            sudo mkdir -p /opt
            sudo git clone https://github.com/Microsoft/vcpkg.git $VCPKG_ROOT
            sudo $VCPKG_ROOT/bootstrap-vcpkg.sh
            sudo $VCPKG_ROOT/vcpkg install abseil openssl
          else
            echo "vcpkg already installed at $VCPKG_ROOT"
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Core build tools
          sudo apt-get install -y build-essential pkg-config
          # CMake (upgrade if needed for CUDA support)
          sudo apt-get install -y cmake libzstd-dev
          # GEOS for spatial operations
          sudo apt-get install -y libgeos-dev
          # CUDA toolkit (if not pre-installed)
          if ! command -v nvcc &> /dev/null; then
            sudo apt-get install -y nvidia-cuda-toolkit
          fi

      - name: Setup Rust toolchain
        run: |
          if ! command -v cargo &> /dev/null; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
          fi
          rustup toolchain install stable --no-self-update
          rustup default stable
          cargo --version
          rustc --version

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-gpu-v2"
          # Cache key includes CUDA version
          key: "${{ runner.os }}-cuda-${{ hashFiles('c/sedona-libgpuspatial/**') }}"

      - name: Build libgpuspatial (CUDA compilation - ~20-25 minutes)
        run: |
          echo "Starting libgpuspatial build with CUDA support..."
          echo "Note: This step takes approximately 20-25 minutes on g5.xlarge instances"
          cargo build --package sedona-libgpuspatial --features gpu --verbose
          echo "libgpuspatial build complete"

      - name: Build GPU spatial join
        run: |
          cargo build --package sedona-spatial-join-gpu --features gpu

      - name: Test libgpuspatial
        run: |
          echo "Running libgpuspatial tests with GPU..."
          cargo test --package sedona-libgpuspatial --features gpu -- --nocapture

      - name: Test GPU spatial join (structure tests)
        run: |
          echo "Running structure tests (don't require GPU execution)..."
          cargo test --package sedona-spatial-join-gpu --features gpu

      - name: Test GPU functional tests (require GPU)
        run: |
          echo "Running GPU functional tests (require actual GPU)..."
          cargo test --package sedona-spatial-join-gpu --features gpu -- --ignored --nocapture

      - name: Verify GPU compilation
        run: |
          # Verify that GPU code was actually compiled with CUDA
          echo "Verifying CUDA was used in compilation..."
          if cargo build --package sedona-libgpuspatial --features gpu -vv 2>&1 | grep -q "GPU feature not enabled"; then
            echo "ERROR: GPU feature was not enabled!"
            exit 1
          fi
          echo "âœ“ GPU build successful with CUDA support"

      - name: Build summary
        run: |
          echo "=== GPU CI Build Summary ==="
          echo "GPU: $(nvidia-smi --query-gpu=name --format=csv,noheader)"
          echo "CUDA Version: $(nvcc --version | grep release)"
          echo "Rust Version: $(rustc --version)"
          echo "Build completed successfully"